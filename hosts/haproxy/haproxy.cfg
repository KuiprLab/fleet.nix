global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # SSL configuration
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  forwardfor
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    # errorfile 400 /etc/haproxy/errors/400.http
    # errorfile 403 /etc/haproxy/errors/403.http
    # errorfile 408 /etc/haproxy/errors/408.http
    # errorfile 500 /etc/haproxy/errors/500.http
    # errorfile 502 /etc/haproxy/errors/502.http
    # errorfile 503 /etc/haproxy/errors/503.http
    # errorfile 504 /etc/haproxy/errors/504.http

# Statistics dashboard
frontend stats
    bind *:1936
    stats enable
    stats uri /
    stats refresh 10s
    stats auth admin:secure_password
    stats admin if LOCALHOST

# HTTP frontend - handles both regular traffic and ACME challenges
frontend http-in
    bind *:80
    mode http
    option httplog
    
    # Special handling for Let's Encrypt ACME challenges
    acl letsencrypt_acme path_beg /.well-known/acme-challenge/
    use_backend acme_challenge if letsencrypt_acme
    
    # For non-ACME challenge traffic, redirect to HTTPS
    redirect scheme https code 301 if !letsencrypt_acme
    
    # Define ACLs for service routing
    acl is_dns hdr(host) -i dns.hl.kuipr.de
    acl is_ha hdr(host) -i ha.hl.kuipr.de
    acl is_hl hdr(host) -i hl.kuipr.de
    acl is_proxy hdr(host) -i proxy.hl.kuipr.de
    acl is_pve hdr(host) -i pve.hl.kuipr.de
    acl is_truenas hdr(host) -i truenas.hl.kuipr.de
    acl is_xdr hdr(host) -i xdr.hl.kuipr.de
    
    # Default backend
    default_backend webservers

# HTTPS frontend
frontend https-in
    bind *:443 ssl crt /etc/ssl/private/hl.kuipr.de.pem
    mode http
    option httplog
    
    # Define ACLs for service routing
    acl is_dns hdr(host) -i dns.hl.kuipr.de
    acl is_ha hdr(host) -i ha.hl.kuipr.de
    acl is_hl hdr(host) -i hl.kuipr.de
    acl is_proxy hdr(host) -i proxy.hl.kuipr.de
    acl is_pve hdr(host) -i pve.hl.kuipr.de
    acl is_truenas hdr(host) -i truenas.hl.kuipr.de
    acl is_xdr hdr(host) -i xdr.hl.kuipr.de
    
    # Route to backends based on ACLs
    use_backend dns if is_dns
    use_backend ha if is_ha
    use_backend hl if is_hl
    use_backend proxy if is_proxy
    use_backend pve if is_pve
    use_backend truenas if is_truenas
    use_backend xdr if is_xdr
    
    # Default backend
    default_backend webservers

# ACME Challenge Backend for Let's Encrypt HTTP validation
backend acme_challenge
    mode http
    server local 127.0.0.1:54321 check

# DNS backend (Technitium DNS)
backend dns
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server dns_server 192.168.1.112:5380 check

# HA backend
backend ha
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server ha_server 100.74.70.33:9000 check

# HL backend
backend hl
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server hl_server 192.168.1.137:5487 check

# Proxy backend
backend proxy
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server proxy_server 192.168.1.137:8000 check

# PVE backend
backend pve
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server pve_server 192.168.1.85:8006 check ssl verify none

# TrueNAS backend
backend truenas
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server truenas_server 192.168.1.122:80 check

# XDR backend
backend xdr
    mode http
    option httpchk
    http-check send meth GET uri /
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    server xdr_server 192.168.1.2 check ssl verify none

# Default web backend
backend webservers
    mode http
    balance roundrobin
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header Host %[req.hdr(Host)]
    
    # Return a temporary placeholder page using errorfile instead of set-body
    errorfile 503 /etc/haproxy/errors/welcome.http