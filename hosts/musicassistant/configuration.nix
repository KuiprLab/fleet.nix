# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  modulesPath,
  ...
}: let
  commonUtils = import ../../utils/common.nix {inherit pkgs;};
in {
  imports = [
    (modulesPath + "/virtualisation/proxmox-lxc.nix")
    ../../utils/my-declared-folders.nix
  ];
  config = lib.mkMerge [
    (commonUtils.mkLxcConfig {
      hostname = "hl-lxc-musicassistant";
      ipAddress = "192.168.1.11";
    })
    {
      # Runtime
      virtualisation.podman = {
        enable = true;
        autoPrune.enable = true;
        dockerCompat = true;
      };
      myFolders = {
        homebridge = {
          path = "/var/lib/music-assistant";
          owner = "root";
          group = "root";
          mode = "0755";
        };
      };
      networking.firewall = {
        enable = false;
        allowedTCPPorts = [8097 8085 22]; # HTTP, HTTPS, HAProxy stats, SSH
      };
      # Enable container name DNS for all Podman networks.
      networking.firewall.interfaces = let
        matchAll =
          if !config.networking.nftables.enable
          then "podman+"
          else "podman*";
      in {
        "${matchAll}".allowedUDPPorts = [53];
      };
      virtualisation.oci-containers.backend = "podman";

      # Containers
      virtualisation.oci-containers.containers."music-assistant-server" = {
        image = "ghcr.io/music-assistant/server:latest";
        environment = {
          "LOG_LEVEL" = "info";
        };
        volumes = [
          "/var/lib/music-assistant:/data:rw"
        ];
        log-driver = "journald";
        extraOptions = [
          "--cap-add=DAC_READ_SEARCH"
          "--cap-add=SYS_ADMIN"
          "--network=host"
          "--security-opt=apparmor:unconfined"
        ];
      };

      # AirConnect container for AirPlay to Chromecast/Google Home bridging
      virtualisation.oci-containers.containers."airconnect" = {
        image = "1activegeek/airconnect:latest";
        log-driver = "journald";
        extraOptions = [
          "--network=host"
          # Host networking is required for mDNS discovery of Chromecast devices
          # and for AirPlay device advertisement
        ];
      };

      # Services
      systemd.services."podman-music-assistant-server" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
        };
        partOf = [
          "podman-compose-musicassistant-root.target"
        ];
        wantedBy = [
          "podman-compose-musicassistant-root.target"
        ];
      };

      systemd.services."podman-airconnect" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
        };
        partOf = [
          "podman-compose-musicassistant-root.target"
        ];
        wantedBy = [
          "podman-compose-musicassistant-root.target"
        ];
      };

      # Root service
      # When started, this will automatically create all resources and start
      # the containers. When stopped, this will teardown all resources.
      systemd.targets."podman-compose-musicassistant-root" = {
        unitConfig = {
          Description = "Root target generated by compose2nix.";
        };
        wantedBy = ["multi-user.target"];
      };
    }
  ];
}
